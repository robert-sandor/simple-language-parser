constant identifier main int char string array var const if else while + - * / % = == != < <= > >= ( ) [ ] { } : ; read write ,
PROGRAM ASSIGN_STATEMENT CONDITION REST_OF_CONDITION RELATION IF_STATEMENT ELSE_STATEMENT WHILE_STATEMENT TYPE COMP_STATEMENT DECL_STATEMENT REST_OF_DECL_STATEMENT INITIALIZATION ARRAY_INIT STATEMENT TYPE IO_STATEMENT CONSTANT_OR_IDENTIFIER EXPRESSION A B C D STRUCT_STATEMENT
PROGRAM

PROGRAM -> main { COMP_STATEMENT }

COMP_STATEMENT -> STATEMENT COMP_STATEMENT
COMP_STATEMENT -> eps

STATEMENT -> DECL_STATEMENT ;
STATEMENT -> ASSIGN_STATEMENT ;
STATEMENT -> IO_STATEMENT ;
STATEMENT -> STRUCT_STATEMENT

ASSIGN_STATEMENT -> identifier = INITIALIZATION

DECL_STATEMENT -> TYPE identifier REST_OF_DECL_STATEMENT

TYPE -> int
TYPE -> char
TYPE -> string
TYPE -> array [ TYPE ]

REST_OF_DECL_STATEMENT -> = INITIALIZATION
REST_OF_DECL_STATEMENT -> eps

INITIALIZATION -> constant
INITIALIZATION -> identifier
INITIALIZATION -> EXPRESSION
INITIALIZATION -> [ ARRAY_INIT ]

ARRAY_INIT -> INITIALIZATION , ARRAY_INIT
ARRAY_INIT -> eps

IO_STATEMENT -> read ( identifier )
IO_STATEMENT -> write ( CONSTANT_OR_IDENTIFIER )

CONSTANT_OR_IDENTIFIER -> constant
CONSTANT_OR_IDENTIFIER -> identifier

EXPRESSION -> B A
A -> + B A
A -> - B A
A -> eps
B -> D C
C -> * D C
C -> / D C
C -> % D C
C -> eps
D -> ( EXPRESSION )
D -> constant
D -> identifier

STRUCT_STATEMENT -> IF_STATEMENT
STRUCT_STATEMENT -> WHILE_STATEMENT

IF_STATEMENT -> if ( CONDITION ) { COMP_STATEMENT } ELSE_STATEMENT
ELSE_STATEMENT -> else { COMP_STATEMENT }
ELSE_STATEMENT -> eps

WHILE_STATEMENT -> while ( CONDITION ) { COMP_STATEMENT }

CONDITION -> CONSTANT_OR_IDENTIFIER REST_OF_CONDITION
REST_OF_CONDITION -> RELATION CONDITION
REST_OF_CONDITION -> eps

RELATION -> ==
RELATION -> !=
RELATION -> <
RELATION -> <=
RELATION -> >
RELATION -> >=